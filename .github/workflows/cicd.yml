name: Django CI/CD Workflow

on: 
  push:
    branches:
      - main
      - develop
    paths-ignore:
      - '.gitignore'
      - '.dockerignore'
      - 'README.md'
  pull_request:
    branches:
      - main
      - develop
  
jobs:
  test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.9]
    
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: django-test
          MYSQL_USER: user
          MYSQL_ROOT_PASSWORD: root
        ports: 
          - 3306:3306
        options: 
          --health-cmd="mysqladmin ping" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=3
    
    steps:
    - name: checkout
      uses: actions/checkout@v2
    
    - name: set up python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: run migrations
      run: |
        export DEBUG=1
        export SECRET_KEY=test-secret-key
        export ALLOWED_HOSTS=*
        python manage.py migrate
      env: 
        DB_ENGINE: django.db.backends.mysql
        DB_NAME: django-test
        DB_USER: root
        DB_PASSWORD: root
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
    
    - name: run tests
      run: |
        export DEBUG=1
        export SECRET_KEY=test-secret-key
        export ALLOWED_HOSTS=*
        coverage run manage.py test
        coverage report
      env: 
        DB_ENGINE: django.db.backends.mysql
        DB_NAME: django-test
        DB_USER: root
        DB_PASSWORD: root
        DB_HOST: 127.0.0.1
        DB_PORT: 3306

  build-deploy:
    
    runs-on: ubuntu-latest
    needs: [test]
    if: ${{ github.event_name == 'push' }}

    steps:
    - name: checkout
      uses: actions/checkout@v2
    
    - name: create env file
      run: |
        touch .env
        echo "${{ secrets.ENV }}" >> .env

    - name: get github actions runner's ip
      id: ip
      uses: haythem/public-ip@v1.2

    - name: add github actions runner's ip to aws ec2 security group
      run: |
        aws ec2 authorize-security-group-ingress --group-name ${{ secrets.SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: create remote directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: mkdir -p /home/ubuntu/srv/deploy
    
    - name: copy source via ssh key
      uses: burnett01/rsync-deployments@4.1
      with:
        switches: -avzr --delete
        remote_path: /home/ubuntu/srv/deploy/
        remote_host: ${{ secrets.HOST }}
        remote_user: ${{ secrets.USERNAME }}
        remote_key: ${{ secrets.KEY }}

    - name: executing remote ssh commands
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.KEY }}
        script: |
          sh /home/ubuntu/srv/deploy/config/scripts/deploy.sh
          
    - name: remove github actions runner's ip from aws ec2 security group
      run: |
        aws ec2 revoke-security-group-ingress --group-name ${{ secrets.SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      if: ${{ always() }}